#include <msp430f5529.h>
#include <stdint.h>
#include <stdlib.h>

void spi_max(uint8_t address, uint8_t data);
void init_MAX7219(void);
/* line counters */
unsigned char limit = 0x09;         // limit for line check
unsigned char linesMade = 0x00;     // lines made
unsigned char goalLines = 1;        // lines per level
unsigned char pieceCount = 0;       // pieces droped on the actual level
unsigned char launchDifficulty = 4; // launches a dificulty every n pieces

// game variables
unsigned char pieceNum;             // actual piece number [0,6]
unsigned char nextPieceNum;         // next piece number [0,6]
unsigned char piecePos;             // actual piece position [0,4]
signed char pieceShift;                    // actual piece shift (left/right) [-3,4]
unsigned char pieceY;               // actual piece Y position [0,19]
unsigned char gameStart = 0x00;     // if game is started
unsigned char gameEnd = 0x00;       // if game is ended

/*
 * tetris pieces
 *
 * each piece is represented on an array of 4 chars.
 * in this three lever array there are represented all pieces
 * in all positions of Tetris: 7 types * 4 positions = 28 pieces.
 * example:
 *   the "I" piece -> position 0 or 2:
 *   {0x00,0x3c,0x00,0x00} =        00000000
 *                                       00111100
 *                                       00000000
 *                                       00000000
 *   the "I" piece -> position 1 or 3:
 *   {0x08,0x08,0x08,0x08} =        00001000
 *                                       00001000
 *                                       00001000
 *                                       00001000
 */
unsigned char pieces[7][4][4] = {
    {
        {0x00, 0x18, 0x18, 0x00}, // Piece O, position 0
        {0x00, 0x18, 0x18, 0x00}, // Piece O, position 1
        {0x00, 0x18, 0x18, 0x00}, // Piece O, position 2
        {0x00, 0x18, 0x18, 0x00}
    }, // Piece O, position 3
    {
        {0x00, 0x3c, 0x00, 0x00}, // Piece I, position 0
        {0x08, 0x08, 0x08, 0x08}, // Piece I, position 1
        {0x00, 0x3c, 0x00, 0x00}, // Piece I, position 2
        {0x08, 0x08, 0x08, 0x08}
    }, // Piece I, position 3
    {
        {0x00, 0x0c, 0x18, 0x00}, // Piece S, position 0
        {0x08, 0x0c, 0x04, 0x00}, // Piece S, position 1
        {0x00, 0x0c, 0x18, 0x00}, // Piece S, position 2
        {0x08, 0x0c, 0x04, 0x00}
    }, // Piece S, position 3
    {
        {0x00, 0x18, 0x0c, 0x00}, // Piece Z, position 0
        {0x04, 0x0c, 0x08, 0x00}, // Piece Z, position 1
        {0x00, 0x18, 0x0c, 0x00}, // Piece Z, position 2
        {0x04, 0x0c, 0x08, 0x00}
    }, // Piece Z, position 3
    {
        {0x00, 0x1c, 0x10, 0x00}, // Piece L, position 0
        {0x08, 0x08, 0x0c, 0x00}, // Piece L, position 1
        {0x04, 0x1c, 0x00, 0x00}, // Piece L, position 2
        {0x18, 0x08, 0x08, 0x00}
    }, // Piece L, position 3
    {
        {0x00, 0x1c, 0x04, 0x00}, // Piece J, position 0
        {0x0c, 0x08, 0x08, 0x00}, // Piece J, position 1
        {0x10, 0x1c, 0x00, 0x00}, // Piece J, position 2
        {0x08, 0x08, 0x18, 0x00}
    }, // Piece J, position 3
    {
        {0x00, 0x1c, 0x08, 0x00}, // Piece T, position 0
        {0x08, 0x0c, 0x08, 0x00}, // Piece T, position 1
        {0x08, 0x1c, 0x00, 0x00}, // Piece T, position 2
        {0x04, 0x0c, 0x04, 0x00}
    } // Piece T, position 3
};


// auxiliary structs
unsigned char field[12];                                // The game field. 16+4 hidden lines
unsigned char displayField[8];                         // The game field for the display
unsigned char actualPiece[] = {0x00, 0x00, 0x00, 0x00}; // actual piece. used to add/subtract from field
unsigned char tempPiece[] = {0x00, 0x00, 0x00, 0x00};   //temporary piece for collision detection purpose


// MAX7219 Register addresses
#define MAX_NOOP    0x00
#define MAX_DIGIT0  0x01
#define MAX_DIGIT1  0x02
#define MAX_DIGIT2  0x03
#define MAX_DIGIT3  0x04
#define MAX_DIGIT4  0x05
#define MAX_DIGIT5  0x06
#define MAX_DIGIT6  0x07
#define MAX_DIGIT7  0x08
#define MAX_DECODEMODE  0x09
#define MAX_INTENSITY   0x0A
#define MAX_SCANLIMIT   0x0B
#define MAX_SHUTDOWN    0x0C
#define MAX_DISPLAYTEST 0x0F
void spi_max(uint8_t address, uint8_t data)
{
    P6OUT &= ~BIT4;                 // CS low
    _delay_cycles(50);
    while (!(UCB0IFG&UCTXIFG));     // Wait until done
    UCB0TXBUF = (address & 0x0F);
    while (!(UCB0IFG&UCTXIFG));     // Wait until done
    UCB0TXBUF = (data);
    while (!(UCB0IFG&UCTXIFG));     // Wait until done
    P6OUT |= BIT4;                  // CS high
    P6OUT &=~BIT4;
}


void init_MAX7219(void)
{
    // Initialise MAX7219 with 8x8 led matrix
    spi_max(MAX_NOOP, 0x00);    // NO OP (seems needed after power on)
    spi_max(MAX_SCANLIMIT, 0x07);   // Enable all digits (always needed for current/8 per row)
    spi_max(MAX_INTENSITY, 0x03);   // Display intensity (0x00 to 0x0F)
    spi_max(MAX_DECODEMODE, 0); // No BCD decoding for led matrix

    // Clear all rows/digits
    spi_max(MAX_DIGIT0, 0);
    spi_max(MAX_DIGIT1, 0);
    spi_max(MAX_DIGIT2, 0);
    spi_max(MAX_DIGIT3, 0);
    spi_max(MAX_DIGIT4, 0);
    spi_max(MAX_DIGIT5, 0);
    spi_max(MAX_DIGIT6, 0);
    spi_max(MAX_DIGIT7, 0);
    spi_max(MAX_SHUTDOWN, 1); // Wake oscillators/display up
 }
void updateDisplayField(){
     uint8_t row;
    unsigned int i =2;
    for (i = 2 ; i < 10; i++) {
        displayField[i-2] = field[i];
    }
    for (row=0; row<8; row++)
    {
        spi_max(row+1, displayField[row]);
    }

}
void removeLine(char line) {
    char i;
    for (i = line; i > 0; i--) {
        field[i] = field[i - 1];
    }
    field[0] = 0x00;
}

void generateField() {

    char i;
    for (i = 0; i < 10; i++) {
        field[i] = 0x00;        // the first 18 lines are empty
    }

    field[10] = 0xff;           // the last 2 lines are full
    field[11] = 0xff;           // for collision detection

    updateDisplayField();       // new field made, updates the display field
}

/*
 * generates a new random piece
 */
void generatePiece() {

    pieceY = 0x00;          // reset piece y position
    pieceShift = 0x00;      // reset piece x position
    piecePos = 0x00;        // reset piece rotate position

    pieceNum = nextPieceNum;                    // new piece
    nextPieceNum = rand() % 7;            // new piece
    actualPiece[0] = pieces[pieceNum][0][0];    // copy piece to actual piece
    actualPiece[1] = pieces[pieceNum][0][1];
    actualPiece[2] = pieces[pieceNum][0][2];
    actualPiece[3] = pieces[pieceNum][0][3];

}
void shiftLeft(unsigned char piece[]) {
   piece[0] = piece[0] << 1;
   piece[1] = piece[1] << 1;
   piece[2] = piece[2] << 1;
   piece[3] = piece[3] << 1;
}

void addPiece() {
    field[pieceY] = field[pieceY] | actualPiece[0];
    field[pieceY + 1] = field[pieceY + 1] | actualPiece[1];
    field[pieceY + 2] = field[pieceY + 2] | actualPiece[2];
    field[pieceY + 3] = field[pieceY + 3] | actualPiece[3];
}


/*
 * just deletes the actual piece from field (bitwise XOR operation)
 */
void deletePiece() {
    field[pieceY] = field[pieceY] ^ actualPiece[0];
    field[pieceY + 1] = field[pieceY + 1] ^ actualPiece[1];
    field[pieceY + 2] = field[pieceY + 2] ^ actualPiece[2];
    field[pieceY + 3] = field[pieceY + 3] ^ actualPiece[3];
}

/*
 * just verifies if there is collition beetween temp piece and field
 * (bitwise AND/OR operation)
 */
unsigned char isCollision() {

    return (((field[pieceY] & tempPiece[0]) |
            (field[pieceY + 1] & tempPiece[1]) |
            (field[pieceY + 2] & tempPiece[2]) |
            (field[pieceY + 3] & tempPiece[3])));
}

/*
 * just updates the temp piece
 */
void updateTempPiece() {
    tempPiece[0] = actualPiece[0];
    tempPiece[1] = actualPiece[1];
    tempPiece[2] = actualPiece[2];
    tempPiece[3] = actualPiece[3];
}


void startGame() {
    generateField();        // new field
     generatePiece();        // new piece
     addPiece();             // adds the new piece to fild
     updateDisplayField();   // updates the display field
     limit = 0x09;           // sets the checkLines limit to default

}

/* Moves the piece to rigth with collision detection
* moving a piece is just a shift of the 4 chars of the piece
*/


/*
* just shifts the given piece to rigth (one position)
*/
void shiftRigth(unsigned char piece[]) {
   piece[0] = piece[0] >> 1;
   piece[1] = piece[1] >> 1;
   piece[2] = piece[2] >> 1;
   piece[3] = piece[3] >> 1;
}

/*
* Moves the pi
* ece to left with collision detection
* moving a piece is just a shift of the 4 chars of the piece
*/
void goLeft() {
   /*
    * try to move piece only if it still fits in the field after rotation
    * the trick is check if one of the most significant bits of each char is equal to 1
    */
   if (((actualPiece[0] | actualPiece[1] | actualPiece[2] | actualPiece[3]) & 0x80) == 0x00) {
       /*
        * see goRigth() comments for similar description
        */
       deletePiece();
       updateTempPiece();
       shiftLeft(tempPiece);
       if (isCollision() == 0x00) {
           shiftLeft(actualPiece);
           addPiece();
           updateTempPiece();
           pieceShift--;
       }
       addPiece();
       updateDisplayField();
   }
}
void goRight() {
   /*
    * try to move piece only if it still fits in the field after rotation
    * the trick is check if one of the less significant bits of each char is equal to 1
    */
   if (((actualPiece[0] | actualPiece[1] | actualPiece[2] | actualPiece[3]) & 0x01) == 0x00) {
       /*
        * first deletes the actual piece from the field and then
        * checks is there is no collision with the new position. if the
        * piece fits beetween the other pieces adds it to fild. else retores the original
        * piece if collides with other pieces
        */
       deletePiece();                  // deletes the actual piece from field
       updateTempPiece();              // updates temp piece
       shiftRigth(tempPiece);          // shifts the temp piece
       if (isCollision() == 0x00) {    // no collision? shifts the actual piece
           shiftRigth(actualPiece);    //  and adds it to the field
           addPiece();
           updateTempPiece();
           pieceShift++;
       }
       addPiece();                     // no collision? replace the actual piece on field
       updateDisplayField();           // updates the display field
   }
}
/*
* just shifts the given piece to left (one position)
*/

/*
 * returns the piece max left shift
 * please check the pieces layouts for further information and understanding
 * Returns:     char for max left shift
 */

/*
 * checks made lines and deletes them
 */
void checkLines() {

    char i;
    char j = 0;
    // check lines from Y pos to limit
    for (i = pieceY; i < pieceY + 4 && i <= limit; i++) {
        if (field[i] == 0xff) {     // full line? blink and remove
            j++;
            removeLine(i);
            updateDisplayField();
            linesMade++;
        }
    }

}

void checkGame() {
    // once the piece collids with something down there can
    // be three options: new piece, new lever or game over
        checkLines();                  // goal lines not reached? new piece
        generatePiece();
        addPiece();

}
/*
* Moves the piece down with collision detection
*/
void endGame(){
    int i =0;
    for(i=0;i<8;i++){
        field[i] = 0xff;
    }
    __delay_cycles(50000);
    updateDisplayField();
}
void goDown() {
   /*
    * again the trick is delete the actual piece from field
    * and test collisin with the new position and temp piece
    */
   deletePiece();
   updateTempPiece();
   pieceY++;
   if (isCollision() == 0x00) { // no collision? adds the piece
       addPiece();
   } else if (isCollision() != 0x00 && pieceY > 0x02) { // collision? restores the piece
       pieceY--;
       addPiece();
       checkGame();        // game status check
   } else {                // game over
       endGame();
       startGame();
   }

   updateDisplayField();
}/*
char getMaxLeftShift() {

    if ((((piecePos + 1) % 4 == 0x01 || (piecePos + 1) % 4 == 0x03) &&
            (pieceNum != 0x01 && pieceNum != 0x03 && pieceNum != 0x04)) ||
            ((piecePos + 1) % 4 == 0x01 && ((pieceNum == 0x05 || pieceNum == 0x04)))) {
        return 0xfc;
    }
    if (pieceNum == 0x01 && ((piecePos + 1) % 4 == 0x00 || (piecePos + 1) % 4 == 0x02)) {
        return 0xfe;
    }

    return 0xfd;
}


 * returns the piece max rigth shift
 * please check the pieces layouts for further information and understanding
 * Returns:     char for max rigth shift

char getMaxRigthShift() {
    if (pieceNum == 0x01 || ((piecePos + 1) % 4 == 0x03 &&
            (pieceNum == 0x01 | pieceNum == 0x05 || pieceNum == 0x05)) ||
            (pieceNum == 0x01 || (piecePos + 1) % 4 == 0x00)) {
        return 0x03;
    }

    return 0x02;
} */

void rotate() {

    char i = 0;
    // try to rotate piece only if it still fits in the field after rotation
    //if (pieceNum != 0x00 && getMaxLeftShift() <= pieceShift && pieceShift <= getMaxRigthShift()) {
    if(pieceShift<3 && pieceShift > -3){
        /*
         * first deletes the actual piece from the field and then
         * checks is there is no collision with the new position. if the
         * piece fits beetween the other pieces adds it to fild. else retores the original
         * piece if collides with other pieces
         */
        deletePiece();              // deletes the actual piece from field
        piecePos++;                 // increments the piece y position
        if (piecePos == 0x04) {     // controls the rotation position range
            piecePos = 0x00;
        }
        tempPiece[0] = pieces[pieceNum][piecePos][0]; // updates the temp piece
        tempPiece[1] = pieces[pieceNum][piecePos][1];
        tempPiece[2] = pieces[pieceNum][piecePos][2];
        tempPiece[3] = pieces[pieceNum][piecePos][3];

        if (pieceShift < 0x00) {
            for (i = (-1) * pieceShift; i > 0; i--) {
                shiftLeft(tempPiece);
            }
        } else {
            for (i = pieceShift; i > 0; i--) {
                shiftRigth(tempPiece);
            }
        }

        if (isCollision() == 0x00) { // no collision? aplies the new rotation position
            actualPiece[0] = pieces[pieceNum][piecePos][0];
            actualPiece[1] = pieces[pieceNum][piecePos][1];
            actualPiece[2] = pieces[pieceNum][piecePos][2];
            actualPiece[3] = pieces[pieceNum][piecePos][3];

            // shifts the new piece to the last X position
            if (pieceShift < 0x00) {
                for (i = (-1) * pieceShift; i > 0; i--) {
                    shiftLeft(actualPiece);
                }
            } else {
                for (i = pieceShift; i > 0; i--) {
                    shiftRigth(actualPiece);
                }
            }
        } else { // collision? just go back and aplies the last piece
            if (piecePos == 0x00) {
                piecePos = 0x03;
            } else {
                piecePos--;
            }
        }

        addPiece();
        updateDisplayField(); // updates the display field
    }
}

/*void pause(){
           while(P2IN & 0x06 != 0){
               //if (P2IN & 0x06 != 0){
                   __bis_SR_register ( GIE + LPM0 );
               //}
               if (P2IN & 0x06 == 0){

                   break;
               }
           }
}*/
void rst(){
    endGame();
    startGame();
}
int main(void)
{


    WDTCTL = WDTPW | WDTHOLD;   // stop watchdog timer
    P6OUT |= BIT4;                            // Set P6.4 for CS
    P6DIR |= BIT4;                            // Set P6.4 to output direction
    P3SEL |= BIT0+BIT2;                       // P3.0,2 option select din
    //P3DIR |= BIT0+BIT1+BIT2;                  // Set P3.0,2 to output direction

    UCB0CTL1 |= UCSWRST;                      // *Put state machine in reset*
    UCB0CTL0 |= UCMST+UCCKPH+UCMSB+UCSYNC;    // 3-pin, 8-bit SPI master
                                                                                                         // MSB

    UCB0CTL1 |= UCSSEL_2;                     // SMCLK
    UCB0BR0 = 0x02;                           // /2
    UCB0BR1 = 0;                              //
    UCB0CTL1 &= ~UCSWRST;                     // *Initialize USCI state machine*

    __delay_cycles(100000);

    init_MAX7219();

    __delay_cycles(1000);

    // Some vars
    startGame();
    TA0CCR0 = 3999;
    TA0CCTL0 = CCIE;
    TA0CTL = MC_1|ID_3|TASSEL_1|TACLR;

    __enable_interrupt();

    P1REN |= BIT1|BIT5|BIT2;                            // Enable P1.1 internal resistance
    P1OUT |= BIT1|BIT5|BIT2;                            // Set P1.1 as pull-Up resistance
    P1IES &= ~BIT1|BIT5|BIT2;                           // P1.1 Lo/Hi edge
    P1IFG &= ~BIT1|BIT5|BIT2;                           // P1.1 IFG cleared
    P1IE |= BIT1|BIT5|BIT2;                             // P1.1 interrupt enabled

    P2REN |= BIT1|BIT6|BIT3;                            // Enable P1.1 internal resistance
    P2OUT |= BIT1|BIT6|BIT2;                            // Set P1.1 as pull-Up resistance
    P2IES &= ~BIT1|BIT6|BIT2;                           // P1.1 Lo/Hi edge
    P2IFG &= ~BIT1|BIT6|BIT2;                           // P1.1 IFG cleared
    P2IE |= BIT1|BIT6|BIT2;                             // P1.1 interrupt enabled

     __bis_SR_register( GIE );                 // Enable interrupts globally



    return 0;
}



#pragma vector = TIMER0_A0_VECTOR
__interrupt void TA0_ISR(){
    goDown();
}


#pragma vector=PORT1_VECTOR
__interrupt void Port_1(void)
{
    switch( __even_in_range( P1IV, P1IV_P1IFG7 )) {
        case P1IV_P1IFG1:                                       // Pin 1 (button 2)
                    goRight();
                    break;
        case P1IV_P1IFG2:                                       // Pin 1 (button 2)
               rst();
                    break;
        case P1IV_P1IFG5:                                       // Pin 1 (button 2)
                rotate();
                break;

        default:   _never_executed();



        }


    }

#pragma vector=PORT2_VECTOR
__interrupt void Port_2(void)
{
    switch( __even_in_range( P2IV, P2IV_P2IFG7 )) {
        case P2IV_P2IFG1:                                       // Pin 1 (button 2)
            goLeft();
            break;
        case P2IV_P2IFG3:                                       // Pin 1 (button 2)
               rst();
        case P2IV_P2IFG6:
            goDown();
            break;
        default:   _never_executed();

        }

    }
