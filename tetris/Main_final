#include <msp430f5529.h>
#include <stdint.h>
#include <stdlib.h>


void spi_max(uint8_t address, uint8_t data);
void init_MAX7219(void);
/* line counters */
unsigned char limit = 0x09;         // limit for line check
unsigned char linesMade = 0x00;     // lines made
unsigned char goalLines = 1;        // lines per level
unsigned char pieceCount = 0;       // pieces droped on the actual level

// game variables
unsigned char pieceNum;             // actual piece number [0,6]
unsigned char nextPieceNum;         // next piece number [0,6]
unsigned char piecePos;             // actual piece position [0,4]
signed char pieceShift;                    // actual piece shift (left/right) [-3,4]
unsigned char pieceY;               // actual piece Y position [0,19]

/*
Cada peça é representada utilizando 2 linhas do display, ocupando os bits do meio, além de cada posição possível
 */
unsigned char pieces[7][4][4] = {
    {
        {0x00, 0x18, 0x18, 0x00}, // Piece O, position 0
        {0x00, 0x18, 0x18, 0x00}, // Piece O, position 1
        {0x00, 0x18, 0x18, 0x00}, // Piece O, position 2
        {0x00, 0x18, 0x18, 0x00}
    }, // Piece O, position 3
    {
        {0x00, 0x3c, 0x00, 0x00}, // Piece I, position 0
        {0x08, 0x08, 0x08, 0x08}, // Piece I, position 1
        {0x00, 0x3c, 0x00, 0x00}, // Piece I, position 2
        {0x08, 0x08, 0x08, 0x08}
    }, // Piece I, position 3
    {
        {0x00, 0x0c, 0x18, 0x00}, // Piece S, position 0
        {0x08, 0x0c, 0x04, 0x00}, // Piece S, position 1
        {0x00, 0x0c, 0x18, 0x00}, // Piece S, position 2
        {0x08, 0x0c, 0x04, 0x00}
    }, // Piece S, position 3
    {
        {0x00, 0x18, 0x0c, 0x00}, // Piece Z, position 0
        {0x04, 0x0c, 0x08, 0x00}, // Piece Z, position 1
        {0x00, 0x18, 0x0c, 0x00}, // Piece Z, position 2
        {0x04, 0x0c, 0x08, 0x00}
    }, // Piece Z, position 3
    {
        {0x00, 0x1c, 0x10, 0x00}, // Piece L, position 0
        {0x08, 0x08, 0x0c, 0x00}, // Piece L, position 1
        {0x04, 0x1c, 0x00, 0x00}, // Piece L, position 2
        {0x18, 0x08, 0x08, 0x00}
    }, // Piece L, position 3
    {
        {0x00, 0x1c, 0x04, 0x00}, // Piece J, position 0
        {0x0c, 0x08, 0x08, 0x00}, // Piece J, position 1
        {0x10, 0x1c, 0x00, 0x00}, // Piece J, position 2
        {0x08, 0x08, 0x18, 0x00}
    }, // Piece J, position 3
    {
        {0x00, 0x1c, 0x08, 0x00}, // Piece T, position 0
        {0x08, 0x0c, 0x08, 0x00}, // Piece T, position 1
        {0x08, 0x1c, 0x00, 0x00}, // Piece T, position 2
        {0x04, 0x0c, 0x04, 0x00}
    } // Piece T, position 3
};



unsigned char field[12];                                // Campo do jogo maior que o diplay
unsigned char displayField[8];                         // O que é mostrado no display
unsigned char actualPiece[] = {0x00, 0x00, 0x00, 0x00}; // Peça atual
unsigned char tempPiece[] = {0x00, 0x00, 0x00, 0x00};   //Peça temporária para detectar colisão

unsigned const points[] = {~0x3F,~0x06,~0x5B,~0x4F, ~0x66,~0x6D,~0x7D,~0x07,~0x7F,~0x6F,~0x77,~0x7C,~0x39,~0x5E,~0x79,~0x71 };
// MAX7219 Register addresses
#define MAX_NOOP    0x00
#define MAX_DIGIT0  0x01
#define MAX_DIGIT1  0x02
#define MAX_DIGIT2  0x03
#define MAX_DIGIT3  0x04
#define MAX_DIGIT4  0x05
#define MAX_DIGIT5  0x06
#define MAX_DIGIT6  0x07
#define MAX_DIGIT7  0x08
#define MAX_DECODEMODE  0x09
#define MAX_INTENSITY   0x0A
#define MAX_SCANLIMIT   0x0B
#define MAX_SHUTDOWN    0x0C
#define MAX_DISPLAYTEST 0x0F
void spi_max(uint8_t address, uint8_t data)
{
    P7OUT &= ~BIT4;                 // CS low
    _delay_cycles(50);
    while (!(UCB0IFG&UCTXIFG));     // Wait until done
    UCB0TXBUF = (address & 0x0F);
    while (!(UCB0IFG&UCTXIFG));     // Wait until done
    UCB0TXBUF = (data);
    while (!(UCB0IFG&UCTXIFG));     // Wait until done
    P7OUT |= BIT4;                  // CS high
    P7OUT &=~BIT4;
}


void init_MAX7219(void)
{
    // Initialise MAX7219 with 8x8 led matrix
    spi_max(MAX_NOOP, 0x00);    // NO OP (seems needed after power on)
    spi_max(MAX_SCANLIMIT, 0x07);   // Enable all digits (always needed for current/8 per row)
    spi_max(MAX_INTENSITY, 0x03);   // Display intensity (0x00 to 0x0F)
    spi_max(MAX_DECODEMODE, 0); // No BCD decoding for led matrix

    // Clear all rows/digits
    spi_max(MAX_DIGIT0, 0);
    spi_max(MAX_DIGIT1, 0);
    spi_max(MAX_DIGIT2, 0);
    spi_max(MAX_DIGIT3, 0);
    spi_max(MAX_DIGIT4, 0);
    spi_max(MAX_DIGIT5, 0);
    spi_max(MAX_DIGIT6, 0);
    spi_max(MAX_DIGIT7, 0);
    spi_max(MAX_SHUTDOWN, 1); // Wake oscillators/display up
 }

void updateDisplayField(){ //Campo mostra as linhas 2 a 9 do total
     uint8_t row;
    unsigned int i =2;
    for (i = 2 ; i < 10; i++) {
        displayField[i-2] = field[i];
    }
    for (row=0; row<8; row++)
    {
        spi_max(row+1, displayField[row]);
    }
    if(linesMade >0x0F){
        linesMade = 0x00;
        P6OUT = points[linesMade];
    }
    else{
        P6OUT = points[linesMade];
    }


}
void removeLine(char line) {//retirar linha completa
    char i;
    for (i = line; i > 0; i--) {
        field[i] = field[i - 1];
    }
    field[0] = 0x00;
}

void generateField() { //gerar campo do jogo

    char i;
    for (i = 0; i < 10; i++) {
        field[i] = 0x00;        // 10 primeiras linhas vazias
    }

    field[10] = 0xff;           // 2 últimas cheias para detectar colisão
    field[11] = 0xff;

    updateDisplayField();       // atualizar display
}

/*
 * gerar peça aleatória
 */
void generatePiece() {

    pieceY = 0x00;          // reset posição x,y e rotação da peça
    pieceShift = 0x00;
    piecePos = 0x00;

    pieceNum = nextPieceNum;
    nextPieceNum = rand() % 7;            // nova peça
    actualPiece[0] = pieces[pieceNum][0][0];    // copy piece to actual piece
    actualPiece[1] = pieces[pieceNum][0][1];
    actualPiece[2] = pieces[pieceNum][0][2];
    actualPiece[3] = pieces[pieceNum][0][3];

}
void shiftLeft(unsigned char piece[]) {
   piece[0] = piece[0] << 1;
   piece[1] = piece[1] << 1;
   piece[2] = piece[2] << 1;
   piece[3] = piece[3] << 1;
}

void addPiece() {//adicionar peça
    field[pieceY] = field[pieceY] | actualPiece[0];
    field[pieceY + 1] = field[pieceY + 1] | actualPiece[1];
    field[pieceY + 2] = field[pieceY + 2] | actualPiece[2];
    field[pieceY + 3] = field[pieceY + 3] | actualPiece[3];
}


/*
 * bitwise para deletar peça
 */
void deletePiece() {
    field[pieceY] = field[pieceY] ^ actualPiece[0];
    field[pieceY + 1] = field[pieceY + 1] ^ actualPiece[1];
    field[pieceY + 2] = field[pieceY + 2] ^ actualPiece[2];
    field[pieceY + 3] = field[pieceY + 3] ^ actualPiece[3];
}

/*
detecta colisão
 */
unsigned char isCollision() {

    return (((field[pieceY] & tempPiece[0]) |
            (field[pieceY + 1] & tempPiece[1]) |
            (field[pieceY + 2] & tempPiece[2]) |
            (field[pieceY + 3] & tempPiece[3])));
}

/*
 * atualiza peça temporária
 */
void updateTempPiece() {
    tempPiece[0] = actualPiece[0];
    tempPiece[1] = actualPiece[1];
    tempPiece[2] = actualPiece[2];
    tempPiece[3] = actualPiece[3];
}


void startGame() {
    generateField();        // novo campo
     generatePiece();        // nova peça
     addPiece();             // peça adicionada ao campo
     updateDisplayField();   // atualiza display
     limit = 0x09;

}

void shiftRigth(unsigned char piece[]) {
   piece[0] = piece[0] >> 1;
   piece[1] = piece[1] >> 1;
   piece[2] = piece[2] >> 1;
   piece[3] = piece[3] >> 1;
}

void goLeft() {//move a peça com detector de colisão. Deleta a peça, move e adiciona se não houver colisão

   if (((actualPiece[0] | actualPiece[1] | actualPiece[2] | actualPiece[3]) & 0x80) == 0x00) {
       deletePiece();
       updateTempPiece();
       shiftLeft(tempPiece);
       if (isCollision() == 0x00) {
           shiftLeft(actualPiece);
           addPiece();
           updateTempPiece();
           pieceShift--;
       }
       addPiece();
       updateDisplayField();
   }
}
void goRight() {

   if (((actualPiece[0] | actualPiece[1] | actualPiece[2] | actualPiece[3]) & 0x01) == 0x00) {
       deletePiece();
       updateTempPiece();
       shiftRigth(tempPiece);
       if (isCollision() == 0x00) {
           shiftRigth(actualPiece);
           addPiece();
           updateTempPiece();
           pieceShift++;
       }
       addPiece();
       updateDisplayField();
   }
}
void checkLines() {

    char i;
    char j = 0;

    for (i = pieceY; i < pieceY + 4 && i <= limit; i++) {
        if (field[i] == 0xff) {     //linha cheia? Remover
            j++;
            removeLine(i);
            updateDisplayField();
            linesMade++;
        }
    }

}

void checkGame() {
    //checar se linha foi completa, se não tiver pontos a contar, gerar nova peça
        checkLines();
        generatePiece();
        addPiece();

}

void endGame(){//apaga tela, fim do jogo
    int i =0;
    for(i=0;i<8;i++){
        field[i] = 0xff;
    }
    __delay_cycles(50000);
    linesMade =0x00;
    updateDisplayField();

}
void goDown() {
   /*
     move a peça e detecta colisão
     */
   deletePiece();
   updateTempPiece();
   pieceY++;
   if (isCollision() == 0x00) {
       addPiece();
   } else if (isCollision() != 0x00 && pieceY > 0x02) {
       pieceY--;
       addPiece();
       checkGame();
   } else {
       endGame();
       startGame();
   }

   updateDisplayField();
}

void rotate() {

    char i = 0;
    // rotação apenas se caber na tela/ não estiver nos cantos

    if(pieceShift<3 && pieceShift > -3){
        deletePiece();              // deletes the actual piece from field
        piecePos++;                 // increments the piece y position
        if (piecePos == 0x04) {     // controls the rotation position range
            piecePos = 0x00;
        }
        tempPiece[0] = pieces[pieceNum][piecePos][0];
        tempPiece[1] = pieces[pieceNum][piecePos][1];
        tempPiece[2] = pieces[pieceNum][piecePos][2];
        tempPiece[3] = pieces[pieceNum][piecePos][3];

        if (pieceShift < 0x00) {
            for (i = (-1) * pieceShift; i > 0; i--) {
                shiftLeft(tempPiece);
            }
        } else {
            for (i = pieceShift; i > 0; i--) {
                shiftRigth(tempPiece);
            }
        }

        if (isCollision() == 0x00) {
            actualPiece[0] = pieces[pieceNum][piecePos][0];
            actualPiece[1] = pieces[pieceNum][piecePos][1];
            actualPiece[2] = pieces[pieceNum][piecePos][2];
            actualPiece[3] = pieces[pieceNum][piecePos][3];

           if (pieceShift < 0x00) {
                for (i = (-1) * pieceShift; i > 0; i--) {
                    shiftLeft(actualPiece);
                }
            } else {
                for (i = pieceShift; i > 0; i--) {
                    shiftRigth(actualPiece);
                }
            }
        } else {
            if (piecePos == 0x00) {
                piecePos = 0x03;
            } else {
                piecePos--;
            }
        }

        addPiece();
        updateDisplayField();
    }
}

void pause(){//função  de pause
           while(P2IN & 0x06 != 0){
               //if (P2IN & 0x06 != 0){
                   __bis_SR_register ( GIE + LPM0 );
               //}
               if (P2IN & 0x06 == 0){

                   break;
               }
           }
}
void rst(){ //reset
    endGame();
    startGame();
}
int main(void)
{


    WDTCTL = WDTPW | WDTHOLD;   // stop watchdog timer
    P7OUT |= BIT4;                            // Set P6.4 for CS
    P7DIR |= BIT4;                            // Set P6.4 to output direction
    P3SEL |= BIT0+BIT2;                       // P3.0,2 option select din
                                              // Set P3.0,2 to output direction

    UCB0CTL1 |= UCSWRST;                      // *Put state machine in reset*
    UCB0CTL0 |= UCMST+UCCKPH+UCMSB+UCSYNC;    // 3-pin, 8-bit SPI master
                                                                                                         // MSB

    UCB0CTL1 |= UCSSEL_2;                     // SMCLK
    UCB0BR0 = 0x02;                           // /2
    UCB0BR1 = 0;                              //
    UCB0CTL1 &= ~UCSWRST;                     // *Initialize USCI state machine*

    __delay_cycles(100000);

    init_MAX7219();

    __delay_cycles(1000);
    P6DIR = 0xFF;

    // Some vars
    startGame();
    TA0CCR0 = 3999;
    TA0CCTL0 = CCIE;
    TA0CTL = MC_1|ID_3|TASSEL_1|TACLR;

    __enable_interrupt();

    P1REN |= BIT3|BIT5;                            // Enable P1.1 internal resistance
    P1OUT |= BIT3|BIT5;                            // Set P1.1 as pull-Up resistance
    P1IES &= ~BIT3|BIT5;                           // P1.1 Lo/Hi edge
    P1IFG &= ~BIT3|BIT5;                           // P1.1 IFG cleared
    P1IE |= BIT3|BIT5;                             // P1.1 interrupt enabled

    P2REN |= BIT2|BIT6|BIT3;                            // Enable P1.1 internal resistance
    P2OUT |= BIT2|BIT6|BIT3;                            // Set P1.1 as pull-Up resistance
    P2IES &= ~BIT2|BIT6|BIT3;                           // P1.1 Lo/Hi edge
    P2IFG &= ~BIT2|BIT6|BIT3;                           // P1.1 IFG cleared
    P2IE |= BIT2|BIT6|BIT3;                             // P1.1 interrupt enabled

     __bis_SR_register( GIE );                 // Enable interrupts globally



    return 0;
}



#pragma vector = TIMER0_A0_VECTOR
__interrupt void TA0_ISR(){ //desce a peça a cada 1 segundo
    goDown();
}


#pragma vector=PORT1_VECTOR
__interrupt void Port_1(void)
{
    switch( __even_in_range( P1IV, P1IV_P1IFG7 )) {
                case P1IV_P1IFG3:
               rst();
                    break;
        case P1IV_P1IFG5:
                rotate();
                break;

        default:   _never_executed();



        }


    }

#pragma vector=PORT2_VECTOR
__interrupt void Port_2(void)
{
    switch( __even_in_range( P2IV, P2IV_P2IFG7 )) {
        case P2IV_P2IFG2:
            goLeft();
            break;
        case P2IV_P2IFG3:
            goRight();
            break;

        case P2IV_P2IFG6:
            goDown();
            break;
        default:   _never_executed();

        }

    }
